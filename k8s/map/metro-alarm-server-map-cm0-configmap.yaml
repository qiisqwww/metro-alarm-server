apiVersion: v1
data:
  2024_07_29_1016-9e6f1a7c1e02_initialization.py: "\"\"\"initialization\n\nRevision ID: 9e6f1a7c1e02\nRevises: \nCreate Date: 2024-07-29 10:16:58.112988\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '9e6f1a7c1e02'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('cities',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id')\n    )\n    op.create_table('lines',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id')\n    )\n    op.create_table('stations',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('longitude', sa.String(), nullable=False),\n    sa.Column('latitude', sa.String(), nullable=False),\n    sa.Column('line_id', sa.Integer(), nullable=False),\n    sa.Column('city_id', sa.Integer(), nullable=False),\n    sa.Column('first_neighbour_id', sa.Integer(), nullable=False),\n    sa.Column('second_neighbour_id', sa.Integer(), nullable=False),\n    sa.Column('radius', sa.Integer(), nullable=False),\n    sa.Column('radius_rate', sa.Float(), nullable=False),\n    sa.ForeignKeyConstraint(['city_id'], ['cities.id'], ),\n    sa.ForeignKeyConstraint(['first_neighbour_id'], ['stations.id'], ),\n    sa.ForeignKeyConstraint(['line_id'], ['lines.id'], ),\n    sa.ForeignKeyConstraint(['second_neighbour_id'], ['stations.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id')\n    )\n    op.create_table('user_favourite_stations',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('station_id', sa.Integer(), nullable=False),\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['station_id'], ['stations.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user_favourite_stations')\n    op.drop_table('stations')\n    op.drop_table('lines')\n    op.drop_table('cities')\n    # ### end Alembic commands ###\n"
  2024_08_08_1750-811d2edc2b4d_updated_models.py: |
    """updated models

    Revision ID: 811d2edc2b4d
    Revises: 9e6f1a7c1e02
    Create Date: 2024-08-08 17:50:18.763044

    """
    from typing import Sequence, Union

    from alembic import op
    import sqlalchemy as sa


    # revision identifiers, used by Alembic.
    revision: str = '811d2edc2b4d'
    down_revision: Union[str, None] = '9e6f1a7c1e02'
    branch_labels: Union[str, Sequence[str], None] = None
    depends_on: Union[str, Sequence[str], None] = None


    def upgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.add_column('cities', sa.Column('name_eng', sa.String(), nullable=False))
        op.add_column('cities', sa.Column('alias', sa.String(), nullable=False))
        op.create_unique_constraint(None, 'cities', ['id'])
        op.add_column('lines', sa.Column('alias', sa.String(), nullable=False))
        op.add_column('lines', sa.Column('logo_path', sa.String(), nullable=False))
        op.create_unique_constraint(None, 'lines', ['id'])
        op.create_unique_constraint(None, 'stations', ['id'])
        op.create_unique_constraint(None, 'user_favourite_stations', ['id'])
        # ### end Alembic commands ###


    def downgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_constraint(None, 'user_favourite_stations', type_='unique')
        op.drop_constraint(None, 'stations', type_='unique')
        op.drop_constraint(None, 'lines', type_='unique')
        op.drop_column('lines', 'logo_path')
        op.drop_column('lines', 'alias')
        op.drop_constraint(None, 'cities', type_='unique')
        op.drop_column('cities', 'alias')
        op.drop_column('cities', 'name_eng')
        # ### end Alembic commands ###
  2024_09_03_1927-340150a5b8e7_changed_latitude_longitude_to_nullable.py: |
    """changed latitude & longitude to nullable

    Revision ID: 340150a5b8e7
    Revises: 811d2edc2b4d
    Create Date: 2024-09-03 19:27:37.707793

    """
    from typing import Sequence, Union

    from alembic import op
    import sqlalchemy as sa


    # revision identifiers, used by Alembic.
    revision: str = '340150a5b8e7'
    down_revision: Union[str, None] = '811d2edc2b4d'
    branch_labels: Union[str, Sequence[str], None] = None
    depends_on: Union[str, Sequence[str], None] = None


    def upgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('stations', 'longitude',
                   existing_type=sa.VARCHAR(),
                   nullable=True)
        op.alter_column('stations', 'latitude',
                   existing_type=sa.VARCHAR(),
                   nullable=True)
        # ### end Alembic commands ###


    def downgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('stations', 'latitude',
                   existing_type=sa.VARCHAR(),
                   nullable=False)
        op.alter_column('stations', 'longitude',
                   existing_type=sa.VARCHAR(),
                   nullable=False)
        # ### end Alembic commands ###
  2024_09_03_1938-22c6152a662e_changed_line_s_logo_path_to_nullable.py: |
    """changed line's logo path to nullable

    Revision ID: 22c6152a662e
    Revises: 340150a5b8e7
    Create Date: 2024-09-03 19:38:19.589065

    """
    from typing import Sequence, Union

    from alembic import op
    import sqlalchemy as sa


    # revision identifiers, used by Alembic.
    revision: str = '22c6152a662e'
    down_revision: Union[str, None] = '340150a5b8e7'
    branch_labels: Union[str, Sequence[str], None] = None
    depends_on: Union[str, Sequence[str], None] = None


    def upgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('lines', 'logo_path',
                   existing_type=sa.VARCHAR(),
                   nullable=True)
        # ### end Alembic commands ###


    def downgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('lines', 'logo_path',
                   existing_type=sa.VARCHAR(),
                   nullable=False)
        # ### end Alembic commands ###
  2024_09_04_1316-34aacbe93c0a_neighbours_ids_to_nullable.py: |
    """neighbours ids to nullable

    Revision ID: 34aacbe93c0a
    Revises: 22c6152a662e
    Create Date: 2024-09-04 13:16:40.779795

    """
    from typing import Sequence, Union

    from alembic import op
    import sqlalchemy as sa


    # revision identifiers, used by Alembic.
    revision: str = '34aacbe93c0a'
    down_revision: Union[str, None] = '22c6152a662e'
    branch_labels: Union[str, Sequence[str], None] = None
    depends_on: Union[str, Sequence[str], None] = None


    def upgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column('stations', 'first_neighbour_id',
                   existing_type=sa.INTEGER(),
                   nullable=True)
        op.alter_column('stations', 'second_neighbour_id',
                   existing_type=sa.INTEGER(),
                   nullable=True)
        op.drop_constraint('stations_second_neighbour_id_fkey', 'stations', type_='foreignkey')
        op.drop_constraint('stations_first_neighbour_id_fkey', 'stations', type_='foreignkey')
        # ### end Alembic commands ###


    def downgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.create_foreign_key('stations_first_neighbour_id_fkey', 'stations', 'stations', ['first_neighbour_id'], ['id'])
        op.create_foreign_key('stations_second_neighbour_id_fkey', 'stations', 'stations', ['second_neighbour_id'], ['id'])
        op.alter_column('stations', 'second_neighbour_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
        op.alter_column('stations', 'first_neighbour_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
        # ### end Alembic commands ###
  2024_09_06_1920-6fd289ceb115_added_city_id_field_for_line_table.py: |
    """added city id field for line table

    Revision ID: 6fd289ceb115
    Revises: 34aacbe93c0a
    Create Date: 2024-09-06 19:20:25.617559

    """
    from typing import Sequence, Union

    from alembic import op
    import sqlalchemy as sa


    # revision identifiers, used by Alembic.
    revision: str = '6fd289ceb115'
    down_revision: Union[str, None] = '34aacbe93c0a'
    branch_labels: Union[str, Sequence[str], None] = None
    depends_on: Union[str, Sequence[str], None] = None


    def upgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.add_column('lines', sa.Column('city_id', sa.Integer(), nullable=False))
        op.create_foreign_key(None, 'lines', 'cities', ['city_id'], ['id'])
        # ### end Alembic commands ###


    def downgrade() -> None:
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_constraint(None, 'lines', type_='foreignkey')
        op.drop_column('lines', 'city_id')
        # ### end Alembic commands ###
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: metro-alarm-server-map
  name: metro-alarm-server-map-cm0
